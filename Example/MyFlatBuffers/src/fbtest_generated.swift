//  Automatically generated by the FlatBuffers compiler, do not modify.            
//  SwiftFlatBuffers, licensed under the Apache License, Version 2.0, is from FlatBuffers.            
//            
//  SwiftFlatBuffers  <https://github.com/TonyStark106/SwiftFlatBuffers>            
//

import SwiftFlatBuffers

public enum Color: Int8 {

    case Red = 1

    case Green = 2

    case Blue = 8

}

public enum `Any`: UInt8 {

    case NONE = 0

    case MONSTER = 1

    case STAT = 2

    var type: FBTable.Type? {
        switch self {
        case .NONE:
            return nil
        case .MONSTER:
            return Monster.self
        case .STAT:
            return Stat.self
        }
    }

    internal static let allValues = [NONE, MONSTER, STAT]

    internal static func value(_ ins: FBTable?) -> `Any` {
        for value in allValues {
            if ins?.classForCoder == value.type {
                return value
            }
        }
        fatalError("Can't not serialize \(String(describing: ins)) to `Any`")
    }

}

public class Vec3: FBTable {

    public lazy var x: Float32 = {
        return self.getFloat32(vOffset: 0)
    }()

    public lazy var y: Float32 = {
        return self.getFloat32(vOffset: 4)
    }()

    public lazy var z: Float32 = {
        return self.getFloat32(vOffset: 8)
    }()

    public lazy var test1: Float64 = {
        return self.getFloat64(vOffset: 16)
    }()

    public lazy var test2: Color? = {
        return Color(rawValue: self.getInt8(vOffset: 24))
    }()

    public override var hardPos: FBOffset {
        return 0
    }

    public override var hardSize: UInt {
        return 32
    }

}

extension Vec3 {

    @objc
    private func _add_x(i: Vec3) {
        set(vOffset: 0, pOffset: 4, value: i.x)
    }

    @objc
    private func _add_y(i: Vec3) {
        set(vOffset: 4, pOffset: 8, value: i.y)
    }

    @objc
    private func _add_z(i: Vec3) {
        set(vOffset: 8, pOffset: 12, value: i.z)
    }

    @objc
    private func _add_test1(i: Vec3) {
        set(vOffset: 16, pOffset: 16, value: i.test1)
    }

    @objc
    private func _add_test2(i: Vec3) {
        set(vOffset: 24, pOffset: 24, value: i.test2?.rawValue)
    }

}

public class Ability: FBTable {

    public lazy var id: UInt32 = {
        return self.getUInt32(vOffset: 0)
    }()

    public lazy var distance: UInt32 = {
        return self.getUInt32(vOffset: 4)
    }()

    public override var hardPos: FBOffset {
        return 0
    }

    public override var hardSize: UInt {
        return 8
    }

}

extension Ability {

    @objc
    private func _add_id(i: Ability) {
        set(vOffset: 0, pOffset: 4, value: i.id)
    }

    @objc
    private func _add_distance(i: Ability) {
        set(vOffset: 4, pOffset: 8, value: i.distance)
    }

}

public class Stat: FBTable {

    public lazy var id: String? = {
        return self.getString(vOffset: 4)
    }()

    public lazy var val: Int64 = {
        return self.getInt64(vOffset: 6)
    }()

    public lazy var count: UInt16 = {
        return self.getUInt16(vOffset: 8)
    }()

    public override var hardPos: FBOffset {
        return 16
    }

    public override var hardSize: UInt {
        return 34
    }

}

extension Stat {

    @objc
    private func _add_id(i: Stat) {
        set(vOffset: 4, pOffset: 4, value: i.id)
    }

    @objc
    private func _add_val(i: Stat) {
        set(vOffset: 6, pOffset: 8, value: i.val)
    }

    @objc
    private func _add_count(i: Stat) {
        set(vOffset: 8, pOffset: 16, value: i.count)
    }

}

public class Monster: FBTable {

    public lazy var pos: Vec3? = {
        return self.getStruct(type: Vec3.self, vOffset: 4)
    }()

    public lazy var mana: Int16 = {
        let m_mana = self.getInt16(vOffset: 6)
        return m_mana != 0 ? m_mana : 150
    }()

    public lazy var hp: Int16 = {
        let m_hp = self.getInt16(vOffset: 8)
        return m_hp != 0 ? m_hp : 100
    }()

    public lazy var name: String? = {
        return self.getString(vOffset: 10)
    }()

    public lazy var inventory: [UInt8]? = {
        return self.getNumbers(vOffset: 14)
    }()

    public lazy var color: Color? = {
        let m_color = Color(rawValue: self.getInt8(vOffset: 16))
        return m_color ?? Color(rawValue: 8)!
    }()

    public lazy var testarrayoftables: [Stat]? = {
        return self.getTables(type: Stat.self, vOffset: 18)
    }()

    public lazy var testarrayofstring: [String]? = {
        return self.getStrings(vOffset: 20)
    }()

    public lazy var testarrayofbools: [Bool]? = {
        return self.getNumbers(vOffset: 22)
    }()

    public lazy var testarrayofsortedstruct: [Ability]? = {
        return self.getStructs(type: Ability.self, vOffset: 24, byteSize: 8)
    }()

    fileprivate lazy var test_type: FBTable.Type? = {
        return `Any`(rawValue: self.getUInt8(vOffset: 26))?.type
    }()

    public lazy var test: FBTable? = {
        return self.test_type != nil ? self.getTable(type: self.test_type!, vOffset: 28) : nil
    }()

    public override var hardPos: FBOffset {
        return 36
    }

    public override var hardSize: UInt {
        return 106
    }

}

extension Monster {

    @objc
    private func _add_pos(i: Monster) {
        set(vOffset: 4, pOffset: 4, value: i.pos)
    }

    @objc
    private func _add_mana(i: Monster) {
        set(vOffset: 6, pOffset: 36, value: i.mana)
    }

    @objc
    private func _add_hp(i: Monster) {
        set(vOffset: 8, pOffset: 38, value: i.hp)
    }

    @objc
    private func _add_name(i: Monster) {
        set(vOffset: 10, pOffset: 40, value: i.name)
    }

    @objc
    private func _add_inventory(i: Monster) {
        set(vOffset: 14, pOffset: 44, value: i.inventory)
    }

    @objc
    private func _add_color(i: Monster) {
        set(vOffset: 16, pOffset: 48, value: i.color?.rawValue)
    }

    @objc
    private func _add_testarrayoftables(i: Monster) {
        set(vOffset: 18, pOffset: 49, value: i.testarrayoftables)
    }

    @objc
    private func _add_testarrayofstring(i: Monster) {
        set(vOffset: 20, pOffset: 53, value: i.testarrayofstring)
    }

    @objc
    private func _add_testarrayofbools(i: Monster) {
        set(vOffset: 22, pOffset: 57, value: i.testarrayofbools)
    }

    @objc
    private func _add_testarrayofsortedstruct(i: Monster) {
        set(vOffset: 24, pOffset: 61, value: i.testarrayofsortedstruct)
    }

    @objc
    private func _add_test(i: Monster) {
        set(vOffset: 26, pOffset: 65, value: `Any`.value(i.test))
        set(vOffset: 28, pOffset: 66, value: i.test)
    }

}

